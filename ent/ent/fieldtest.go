// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"pocket_lab/ent/ent/fieldtest"
	"pocket_lab/ent/ent/schema"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// FieldTest is the model entity for the FieldTest schema.
type FieldTest struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DateD holds the value of the "date_d" field.
	DateD time.Time `json:"date_d,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// JF holds the value of the "j_f" field.
	JF []string `json:"j_f,omitempty"`
	// JSF holds the value of the "j_s_f" field.
	JSF *schema.FTConfig `json:"j_s_f,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID string `json:"app_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FieldTest) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case fieldtest.FieldJF, fieldtest.FieldJSF:
			values[i] = new([]byte)
		case fieldtest.FieldID:
			values[i] = new(sql.NullInt64)
		case fieldtest.FieldTitle, fieldtest.FieldAppID:
			values[i] = new(sql.NullString)
		case fieldtest.FieldDateD, fieldtest.FieldDate:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FieldTest", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FieldTest fields.
func (ft *FieldTest) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fieldtest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ft.ID = int(value.Int64)
		case fieldtest.FieldDateD:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_d", values[i])
			} else if value.Valid {
				ft.DateD = value.Time
			}
		case fieldtest.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				ft.Date = value.Time
			}
		case fieldtest.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ft.Title = value.String
			}
		case fieldtest.FieldJF:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field j_f", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ft.JF); err != nil {
					return fmt.Errorf("unmarshal field j_f: %w", err)
				}
			}
		case fieldtest.FieldJSF:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field j_s_f", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ft.JSF); err != nil {
					return fmt.Errorf("unmarshal field j_s_f: %w", err)
				}
			}
		case fieldtest.FieldAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				ft.AppID = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this FieldTest.
// Note that you need to call FieldTest.Unwrap() before calling this method if this FieldTest
// was returned from a transaction, and the transaction was committed or rolled back.
func (ft *FieldTest) Update() *FieldTestUpdateOne {
	return (&FieldTestClient{config: ft.config}).UpdateOne(ft)
}

// Unwrap unwraps the FieldTest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ft *FieldTest) Unwrap() *FieldTest {
	tx, ok := ft.config.driver.(*txDriver)
	if !ok {
		panic("ent: FieldTest is not a transactional entity")
	}
	ft.config.driver = tx.drv
	return ft
}

// String implements the fmt.Stringer.
func (ft *FieldTest) String() string {
	var builder strings.Builder
	builder.WriteString("FieldTest(")
	builder.WriteString(fmt.Sprintf("id=%v", ft.ID))
	builder.WriteString(", date_d=")
	builder.WriteString(ft.DateD.Format(time.ANSIC))
	builder.WriteString(", date=")
	builder.WriteString(ft.Date.Format(time.ANSIC))
	builder.WriteString(", title=")
	builder.WriteString(ft.Title)
	builder.WriteString(", j_f=")
	builder.WriteString(fmt.Sprintf("%v", ft.JF))
	builder.WriteString(", j_s_f=")
	builder.WriteString(fmt.Sprintf("%v", ft.JSF))
	builder.WriteString(", app_id=")
	builder.WriteString(ft.AppID)
	builder.WriteByte(')')
	return builder.String()
}

// FieldTests is a parsable slice of FieldTest.
type FieldTests []*FieldTest

func (ft FieldTests) config(cfg config) {
	for _i := range ft {
		ft[_i].config = cfg
	}
}
