// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"pocket_lab/ent/ent/fieldtest"
	"pocket_lab/ent/ent/predicate"
	"pocket_lab/ent/ent/schema"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FieldTestUpdate is the builder for updating FieldTest entities.
type FieldTestUpdate struct {
	config
	hooks    []Hook
	mutation *FieldTestMutation
}

// Where appends a list predicates to the FieldTestUpdate builder.
func (ftu *FieldTestUpdate) Where(ps ...predicate.FieldTest) *FieldTestUpdate {
	ftu.mutation.Where(ps...)
	return ftu
}

// SetDateD sets the "date_d" field.
func (ftu *FieldTestUpdate) SetDateD(t time.Time) *FieldTestUpdate {
	ftu.mutation.SetDateD(t)
	return ftu
}

// SetDate sets the "date" field.
func (ftu *FieldTestUpdate) SetDate(t time.Time) *FieldTestUpdate {
	ftu.mutation.SetDate(t)
	return ftu
}

// SetTitle sets the "title" field.
func (ftu *FieldTestUpdate) SetTitle(s string) *FieldTestUpdate {
	ftu.mutation.SetTitle(s)
	return ftu
}

// SetJF sets the "j_f" field.
func (ftu *FieldTestUpdate) SetJF(s []string) *FieldTestUpdate {
	ftu.mutation.SetJF(s)
	return ftu
}

// SetJSF sets the "j_s_f" field.
func (ftu *FieldTestUpdate) SetJSF(sc *schema.FTConfig) *FieldTestUpdate {
	ftu.mutation.SetJSF(sc)
	return ftu
}

// SetAppID sets the "app_id" field.
func (ftu *FieldTestUpdate) SetAppID(s string) *FieldTestUpdate {
	ftu.mutation.SetAppID(s)
	return ftu
}

// Mutation returns the FieldTestMutation object of the builder.
func (ftu *FieldTestUpdate) Mutation() *FieldTestMutation {
	return ftu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ftu *FieldTestUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ftu.hooks) == 0 {
		affected, err = ftu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FieldTestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ftu.mutation = mutation
			affected, err = ftu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ftu.hooks) - 1; i >= 0; i-- {
			if ftu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ftu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ftu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ftu *FieldTestUpdate) SaveX(ctx context.Context) int {
	affected, err := ftu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ftu *FieldTestUpdate) Exec(ctx context.Context) error {
	_, err := ftu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ftu *FieldTestUpdate) ExecX(ctx context.Context) {
	if err := ftu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ftu *FieldTestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fieldtest.Table,
			Columns: fieldtest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fieldtest.FieldID,
			},
		},
	}
	if ps := ftu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ftu.mutation.DateD(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fieldtest.FieldDateD,
		})
	}
	if value, ok := ftu.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fieldtest.FieldDate,
		})
	}
	if value, ok := ftu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fieldtest.FieldTitle,
		})
	}
	if value, ok := ftu.mutation.JF(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: fieldtest.FieldJF,
		})
	}
	if value, ok := ftu.mutation.JSF(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: fieldtest.FieldJSF,
		})
	}
	if value, ok := ftu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fieldtest.FieldAppID,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ftu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fieldtest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// FieldTestUpdateOne is the builder for updating a single FieldTest entity.
type FieldTestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FieldTestMutation
}

// SetDateD sets the "date_d" field.
func (ftuo *FieldTestUpdateOne) SetDateD(t time.Time) *FieldTestUpdateOne {
	ftuo.mutation.SetDateD(t)
	return ftuo
}

// SetDate sets the "date" field.
func (ftuo *FieldTestUpdateOne) SetDate(t time.Time) *FieldTestUpdateOne {
	ftuo.mutation.SetDate(t)
	return ftuo
}

// SetTitle sets the "title" field.
func (ftuo *FieldTestUpdateOne) SetTitle(s string) *FieldTestUpdateOne {
	ftuo.mutation.SetTitle(s)
	return ftuo
}

// SetJF sets the "j_f" field.
func (ftuo *FieldTestUpdateOne) SetJF(s []string) *FieldTestUpdateOne {
	ftuo.mutation.SetJF(s)
	return ftuo
}

// SetJSF sets the "j_s_f" field.
func (ftuo *FieldTestUpdateOne) SetJSF(sc *schema.FTConfig) *FieldTestUpdateOne {
	ftuo.mutation.SetJSF(sc)
	return ftuo
}

// SetAppID sets the "app_id" field.
func (ftuo *FieldTestUpdateOne) SetAppID(s string) *FieldTestUpdateOne {
	ftuo.mutation.SetAppID(s)
	return ftuo
}

// Mutation returns the FieldTestMutation object of the builder.
func (ftuo *FieldTestUpdateOne) Mutation() *FieldTestMutation {
	return ftuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ftuo *FieldTestUpdateOne) Select(field string, fields ...string) *FieldTestUpdateOne {
	ftuo.fields = append([]string{field}, fields...)
	return ftuo
}

// Save executes the query and returns the updated FieldTest entity.
func (ftuo *FieldTestUpdateOne) Save(ctx context.Context) (*FieldTest, error) {
	var (
		err  error
		node *FieldTest
	)
	if len(ftuo.hooks) == 0 {
		node, err = ftuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FieldTestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ftuo.mutation = mutation
			node, err = ftuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ftuo.hooks) - 1; i >= 0; i-- {
			if ftuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ftuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ftuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ftuo *FieldTestUpdateOne) SaveX(ctx context.Context) *FieldTest {
	node, err := ftuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ftuo *FieldTestUpdateOne) Exec(ctx context.Context) error {
	_, err := ftuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ftuo *FieldTestUpdateOne) ExecX(ctx context.Context) {
	if err := ftuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ftuo *FieldTestUpdateOne) sqlSave(ctx context.Context) (_node *FieldTest, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fieldtest.Table,
			Columns: fieldtest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fieldtest.FieldID,
			},
		},
	}
	id, ok := ftuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing FieldTest.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ftuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fieldtest.FieldID)
		for _, f := range fields {
			if !fieldtest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fieldtest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ftuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ftuo.mutation.DateD(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fieldtest.FieldDateD,
		})
	}
	if value, ok := ftuo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fieldtest.FieldDate,
		})
	}
	if value, ok := ftuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fieldtest.FieldTitle,
		})
	}
	if value, ok := ftuo.mutation.JF(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: fieldtest.FieldJF,
		})
	}
	if value, ok := ftuo.mutation.JSF(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: fieldtest.FieldJSF,
		})
	}
	if value, ok := ftuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fieldtest.FieldAppID,
		})
	}
	_node = &FieldTest{config: ftuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ftuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fieldtest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
