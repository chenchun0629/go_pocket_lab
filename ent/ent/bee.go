// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"pocket_lab/ent/ent/bee"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Bee is the model entity for the Bee schema.
type Bee struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BeeQuery when eager-loading is set.
	Edges BeeEdges `json:"edges"`
}

// BeeEdges holds the relations/edges for other nodes in the graph.
type BeeEdges struct {
	// Owner holds the value of the owner edge.
	Owner []*Admin `json:"owner,omitempty"`
	// Bc holds the value of the bc edge.
	Bc []*Cat `json:"bc,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading.
func (e BeeEdges) OwnerOrErr() ([]*Admin, error) {
	if e.loadedTypes[0] {
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// BcOrErr returns the Bc value or an error if the edge
// was not loaded in eager-loading.
func (e BeeEdges) BcOrErr() ([]*Cat, error) {
	if e.loadedTypes[1] {
		return e.Bc, nil
	}
	return nil, &NotLoadedError{edge: "bc"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bee) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case bee.FieldID, bee.FieldAge:
			values[i] = new(sql.NullInt64)
		case bee.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Bee", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bee fields.
func (b *Bee) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bee.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case bee.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				b.Age = int(value.Int64)
			}
		case bee.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				b.Name = value.String
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the Bee entity.
func (b *Bee) QueryOwner() *AdminQuery {
	return (&BeeClient{config: b.config}).QueryOwner(b)
}

// QueryBc queries the "bc" edge of the Bee entity.
func (b *Bee) QueryBc() *CatQuery {
	return (&BeeClient{config: b.config}).QueryBc(b)
}

// Update returns a builder for updating this Bee.
// Note that you need to call Bee.Unwrap() before calling this method if this Bee
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bee) Update() *BeeUpdateOne {
	return (&BeeClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Bee entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bee) Unwrap() *Bee {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bee is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bee) String() string {
	var builder strings.Builder
	builder.WriteString("Bee(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", age=")
	builder.WriteString(fmt.Sprintf("%v", b.Age))
	builder.WriteString(", name=")
	builder.WriteString(b.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Bees is a parsable slice of Bee.
type Bees []*Bee

func (b Bees) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
