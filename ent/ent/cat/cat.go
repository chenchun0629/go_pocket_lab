// Code generated by entc, DO NOT EDIT.

package cat

const (
	// Label holds the string label denoting the cat type in the database.
	Label = "cat"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeCb holds the string denoting the cb edge name in mutations.
	EdgeCb = "cb"
	// Table holds the table name of the cat in the database.
	Table = "cats"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "cats"
	// OwnerInverseTable is the table name for the Admin entity.
	// It exists in this package in order to avoid circular dependency with the "admin" package.
	OwnerInverseTable = "admins"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "admin_cats"
	// CbTable is the table that holds the cb relation/edge. The primary key declared below.
	CbTable = "cat_cb"
	// CbInverseTable is the table name for the Bee entity.
	// It exists in this package in order to avoid circular dependency with the "bee" package.
	CbInverseTable = "bees"
)

// Columns holds all SQL columns for cat fields.
var Columns = []string{
	FieldID,
	FieldAge,
	FieldName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "cats"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"admin_cats",
}

var (
	// CbPrimaryKey and CbColumn2 are the table columns denoting the
	// primary key for the cb relation (M2M).
	CbPrimaryKey = []string{"cat_id", "bee_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// AgeValidator is a validator for the "age" field. It is called by the builders before save.
	AgeValidator func(int) error
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
)
