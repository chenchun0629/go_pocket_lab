// Code generated by entc, DO NOT EDIT.

package admin

const (
	// Label holds the string label denoting the admin type in the database.
	Label = "admin"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeCats holds the string denoting the cats edge name in mutations.
	EdgeCats = "cats"
	// EdgeBees holds the string denoting the bees edge name in mutations.
	EdgeBees = "bees"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeSon holds the string denoting the son edge name in mutations.
	EdgeSon = "son"
	// Table holds the table name of the admin in the database.
	Table = "admins"
	// CatsTable is the table that holds the cats relation/edge.
	CatsTable = "cats"
	// CatsInverseTable is the table name for the Cat entity.
	// It exists in this package in order to avoid circular dependency with the "cat" package.
	CatsInverseTable = "cats"
	// CatsColumn is the table column denoting the cats relation/edge.
	CatsColumn = "admin_cats"
	// BeesTable is the table that holds the bees relation/edge. The primary key declared below.
	BeesTable = "admin_bees"
	// BeesInverseTable is the table name for the Bee entity.
	// It exists in this package in order to avoid circular dependency with the "bee" package.
	BeesInverseTable = "bees"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "admins"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "admin_son"
	// SonTable is the table that holds the son relation/edge.
	SonTable = "admins"
	// SonColumn is the table column denoting the son relation/edge.
	SonColumn = "admin_son"
)

// Columns holds all SQL columns for admin fields.
var Columns = []string{
	FieldID,
	FieldAge,
	FieldName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "admins"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"admin_son",
}

var (
	// BeesPrimaryKey and BeesColumn2 are the table columns denoting the
	// primary key for the bees relation (M2M).
	BeesPrimaryKey = []string{"admin_id", "bee_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// AgeValidator is a validator for the "age" field. It is called by the builders before save.
	AgeValidator func(int) error
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
)
